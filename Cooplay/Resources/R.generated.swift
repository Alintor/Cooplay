//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 19 colors.
  struct color {
    /// Color `action.accent`.
    static let actionAccent = Rswift.ColorResource(bundle: R.hostingBundle, name: "action.accent")
    /// Color `action.disabled`.
    static let actionDisabled = Rswift.ColorResource(bundle: R.hostingBundle, name: "action.disabled")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `block`.
    static let block = Rswift.ColorResource(bundle: R.hostingBundle, name: "block")
    /// Color `green`.
    static let green = Rswift.ColorResource(bundle: R.hostingBundle, name: "green")
    /// Color `grey`.
    static let grey = Rswift.ColorResource(bundle: R.hostingBundle, name: "grey")
    /// Color `input`.
    static let input = Rswift.ColorResource(bundle: R.hostingBundle, name: "input")
    /// Color `profileSettings.account`.
    static let profileSettingsAccount = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileSettings.account")
    /// Color `profileSettings.changePassword`.
    static let profileSettingsChangePassword = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileSettings.changePassword")
    /// Color `profileSettings.edit`.
    static let profileSettingsEdit = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileSettings.edit")
    /// Color `profileSettings.logout`.
    static let profileSettingsLogout = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileSettings.logout")
    /// Color `profileSettings.miniGames`.
    static let profileSettingsMiniGames = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileSettings.miniGames")
    /// Color `profileSettings.notifications`.
    static let profileSettingsNotifications = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileSettings.notifications")
    /// Color `profileSettings.reactions`.
    static let profileSettingsReactions = Rswift.ColorResource(bundle: R.hostingBundle, name: "profileSettings.reactions")
    /// Color `red`.
    static let red = Rswift.ColorResource(bundle: R.hostingBundle, name: "red")
    /// Color `shape.background`.
    static let shapeBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "shape.background")
    /// Color `text.primary`.
    static let textPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "text.primary")
    /// Color `text.secondary`.
    static let textSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "text.secondary")
    /// Color `yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "yellow")
    
    /// `UIColor(named: "action.accent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func actionAccent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.actionAccent, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "action.disabled", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func actionDisabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.actionDisabled, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "block", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.block, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "grey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "input", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func input(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.input, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "profileSettings.account", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileSettingsAccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileSettingsAccount, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "profileSettings.changePassword", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileSettingsChangePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileSettingsChangePassword, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "profileSettings.edit", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileSettingsEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileSettingsEdit, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "profileSettings.logout", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileSettingsLogout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileSettingsLogout, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "profileSettings.miniGames", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileSettingsMiniGames(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileSettingsMiniGames, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "profileSettings.notifications", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileSettingsNotifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileSettingsNotifications, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "profileSettings.reactions", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func profileSettingsReactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.profileSettingsReactions, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "shape.background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shapeBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shapeBackground, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "text.primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textPrimary, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "text.secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textSecondary, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `ArkanoidScene.sks`.
    static let arkanoidSceneSks = Rswift.FileResource(bundle: R.hostingBundle, name: "ArkanoidScene", pathExtension: "sks")
    /// Resource file `BrokenPlatform.sks`.
    static let brokenPlatformSks = Rswift.FileResource(bundle: R.hostingBundle, name: "BrokenPlatform", pathExtension: "sks")
    /// Resource file `Config.xcconfig`.
    static let configXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Config", pathExtension: "xcconfig")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "ArkanoidScene", withExtension: "sks")`
    static func arkanoidSceneSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.arkanoidSceneSks
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "BrokenPlatform", withExtension: "sks")`
    static func brokenPlatformSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.brokenPlatformSks
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Config", withExtension: "xcconfig")`
    static func configXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.configXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 58 images.
  struct image {
    /// Image `arkanoid.ball`.
    static let arkanoidBall = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.ball")
    /// Image `arkanoid.block.0`.
    static let arkanoidBlock0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.block.0")
    /// Image `arkanoid.block.1`.
    static let arkanoidBlock1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.block.1")
    /// Image `arkanoid.block.2`.
    static let arkanoidBlock2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.block.2")
    /// Image `arkanoid.block.3`.
    static let arkanoidBlock3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.block.3")
    /// Image `arkanoid.block.4`.
    static let arkanoidBlock4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.block.4")
    /// Image `arkanoid.block.5`.
    static let arkanoidBlock5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.block.5")
    /// Image `arkanoid.block.6`.
    static let arkanoidBlock6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.block.6")
    /// Image `arkanoid.block.7`.
    static let arkanoidBlock7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.block.7")
    /// Image `arkanoid.bubble`.
    static let arkanoidBubble = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.bubble")
    /// Image `arkanoid.paddle`.
    static let arkanoidPaddle = Rswift.ImageResource(bundle: R.hostingBundle, name: "arkanoid.paddle")
    /// Image `common.arrowDown`.
    static let commonArrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.arrowDown")
    /// Image `common.arrowUp`.
    static let commonArrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.arrowUp")
    /// Image `common.back`.
    static let commonBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.back")
    /// Image `common.calendar`.
    static let commonCalendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.calendar")
    /// Image `common.camera`.
    static let commonCamera = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.camera")
    /// Image `common.close`.
    static let commonClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.close")
    /// Image `common.delete`.
    static let commonDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.delete")
    /// Image `common.details`.
    static let commonDetails = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.details")
    /// Image `common.edit`.
    static let commonEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.edit")
    /// Image `common.gallery`.
    static let commonGallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.gallery")
    /// Image `common.gameCover`.
    static let commonGameCover = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.gameCover")
    /// Image `common.gamepadArrow`.
    static let commonGamepadArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.gamepadArrow")
    /// Image `common.hide`.
    static let commonHide = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.hide")
    /// Image `common.link`.
    static let commonLink = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.link")
    /// Image `common.logoIcon`.
    static let commonLogoIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.logoIcon")
    /// Image `common.logoText`.
    static let commonLogoText = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.logoText")
    /// Image `common.logo`.
    static let commonLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.logo")
    /// Image `common.minus`.
    static let commonMinus = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.minus")
    /// Image `common.normal.crown`.
    static let commonNormalCrown = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.normal.crown")
    /// Image `common.plus`.
    static let commonPlus = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.plus")
    /// Image `common.reaction`.
    static let commonReaction = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.reaction")
    /// Image `common.show`.
    static let commonShow = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.show")
    /// Image `common.small.crown`.
    static let commonSmallCrown = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.small.crown")
    /// Image `events.empty`.
    static let eventsEmpty = Rswift.ImageResource(bundle: R.hostingBundle, name: "events.empty")
    /// Image `eventsList.emptyState`.
    static let eventsListEmptyState = Rswift.ImageResource(bundle: R.hostingBundle, name: "eventsList.emptyState")
    /// Image `profileSettings.account`.
    static let profileSettingsAccount = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSettings.account")
    /// Image `profileSettings.actionType.navigation`.
    static let profileSettingsActionTypeNavigation = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSettings.actionType.navigation")
    /// Image `profileSettings.actionType.sheet`.
    static let profileSettingsActionTypeSheet = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSettings.actionType.sheet")
    /// Image `profileSettings.changePassword`.
    static let profileSettingsChangePassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSettings.changePassword")
    /// Image `profileSettings.edit`.
    static let profileSettingsEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSettings.edit")
    /// Image `profileSettings.logout`.
    static let profileSettingsLogout = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSettings.logout")
    /// Image `profileSettings.miniGames`.
    static let profileSettingsMiniGames = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSettings.miniGames")
    /// Image `profileSettings.notifications`.
    static let profileSettingsNotifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSettings.notifications")
    /// Image `profileSettings.reactions`.
    static let profileSettingsReactions = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileSettings.reactions")
    /// Image `status.normal.accepted`.
    static let statusNormalAccepted = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.normal.accepted")
    /// Image `status.normal.declined`.
    static let statusNormalDeclined = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.normal.declined")
    /// Image `status.normal.late`.
    static let statusNormalLate = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.normal.late")
    /// Image `status.normal.maybe`.
    static let statusNormalMaybe = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.normal.maybe")
    /// Image `status.normal.ontime`.
    static let statusNormalOntime = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.normal.ontime")
    /// Image `status.normal.suggestDate`.
    static let statusNormalSuggestDate = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.normal.suggestDate")
    /// Image `status.normal.unknown`.
    static let statusNormalUnknown = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.normal.unknown")
    /// Image `status.small.accepted`.
    static let statusSmallAccepted = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.small.accepted")
    /// Image `status.small.declined`.
    static let statusSmallDeclined = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.small.declined")
    /// Image `status.small.maybe`.
    static let statusSmallMaybe = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.small.maybe")
    /// Image `status.small.ontime`.
    static let statusSmallOntime = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.small.ontime")
    /// Image `status.small.suggestDate`.
    static let statusSmallSuggestDate = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.small.suggestDate")
    /// Image `status.small.unknown`.
    static let statusSmallUnknown = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.small.unknown")
    
    /// `UIImage(named: "arkanoid.ball", bundle: ..., traitCollection: ...)`
    static func arkanoidBall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.block.0", bundle: ..., traitCollection: ...)`
    static func arkanoidBlock0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBlock0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.block.1", bundle: ..., traitCollection: ...)`
    static func arkanoidBlock1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBlock1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.block.2", bundle: ..., traitCollection: ...)`
    static func arkanoidBlock2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBlock2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.block.3", bundle: ..., traitCollection: ...)`
    static func arkanoidBlock3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBlock3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.block.4", bundle: ..., traitCollection: ...)`
    static func arkanoidBlock4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBlock4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.block.5", bundle: ..., traitCollection: ...)`
    static func arkanoidBlock5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBlock5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.block.6", bundle: ..., traitCollection: ...)`
    static func arkanoidBlock6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBlock6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.block.7", bundle: ..., traitCollection: ...)`
    static func arkanoidBlock7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBlock7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.bubble", bundle: ..., traitCollection: ...)`
    static func arkanoidBubble(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidBubble, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arkanoid.paddle", bundle: ..., traitCollection: ...)`
    static func arkanoidPaddle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arkanoidPaddle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.arrowDown", bundle: ..., traitCollection: ...)`
    static func commonArrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonArrowDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.arrowUp", bundle: ..., traitCollection: ...)`
    static func commonArrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonArrowUp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.back", bundle: ..., traitCollection: ...)`
    static func commonBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.calendar", bundle: ..., traitCollection: ...)`
    static func commonCalendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonCalendar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.camera", bundle: ..., traitCollection: ...)`
    static func commonCamera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonCamera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.close", bundle: ..., traitCollection: ...)`
    static func commonClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.delete", bundle: ..., traitCollection: ...)`
    static func commonDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.details", bundle: ..., traitCollection: ...)`
    static func commonDetails(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonDetails, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.edit", bundle: ..., traitCollection: ...)`
    static func commonEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonEdit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.gallery", bundle: ..., traitCollection: ...)`
    static func commonGallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonGallery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.gameCover", bundle: ..., traitCollection: ...)`
    static func commonGameCover(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonGameCover, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.gamepadArrow", bundle: ..., traitCollection: ...)`
    static func commonGamepadArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonGamepadArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.hide", bundle: ..., traitCollection: ...)`
    static func commonHide(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonHide, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.link", bundle: ..., traitCollection: ...)`
    static func commonLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonLink, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.logo", bundle: ..., traitCollection: ...)`
    static func commonLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.logoIcon", bundle: ..., traitCollection: ...)`
    static func commonLogoIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonLogoIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.logoText", bundle: ..., traitCollection: ...)`
    static func commonLogoText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonLogoText, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.minus", bundle: ..., traitCollection: ...)`
    static func commonMinus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonMinus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.normal.crown", bundle: ..., traitCollection: ...)`
    static func commonNormalCrown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonNormalCrown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.plus", bundle: ..., traitCollection: ...)`
    static func commonPlus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonPlus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.reaction", bundle: ..., traitCollection: ...)`
    static func commonReaction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonReaction, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.show", bundle: ..., traitCollection: ...)`
    static func commonShow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonShow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "common.small.crown", bundle: ..., traitCollection: ...)`
    static func commonSmallCrown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonSmallCrown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "events.empty", bundle: ..., traitCollection: ...)`
    static func eventsEmpty(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eventsEmpty, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eventsList.emptyState", bundle: ..., traitCollection: ...)`
    static func eventsListEmptyState(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eventsListEmptyState, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileSettings.account", bundle: ..., traitCollection: ...)`
    static func profileSettingsAccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsAccount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileSettings.actionType.navigation", bundle: ..., traitCollection: ...)`
    static func profileSettingsActionTypeNavigation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsActionTypeNavigation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileSettings.actionType.sheet", bundle: ..., traitCollection: ...)`
    static func profileSettingsActionTypeSheet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsActionTypeSheet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileSettings.changePassword", bundle: ..., traitCollection: ...)`
    static func profileSettingsChangePassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsChangePassword, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileSettings.edit", bundle: ..., traitCollection: ...)`
    static func profileSettingsEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsEdit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileSettings.logout", bundle: ..., traitCollection: ...)`
    static func profileSettingsLogout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsLogout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileSettings.miniGames", bundle: ..., traitCollection: ...)`
    static func profileSettingsMiniGames(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsMiniGames, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileSettings.notifications", bundle: ..., traitCollection: ...)`
    static func profileSettingsNotifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsNotifications, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileSettings.reactions", bundle: ..., traitCollection: ...)`
    static func profileSettingsReactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileSettingsReactions, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.normal.accepted", bundle: ..., traitCollection: ...)`
    static func statusNormalAccepted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusNormalAccepted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.normal.declined", bundle: ..., traitCollection: ...)`
    static func statusNormalDeclined(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusNormalDeclined, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.normal.late", bundle: ..., traitCollection: ...)`
    static func statusNormalLate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusNormalLate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.normal.maybe", bundle: ..., traitCollection: ...)`
    static func statusNormalMaybe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusNormalMaybe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.normal.ontime", bundle: ..., traitCollection: ...)`
    static func statusNormalOntime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusNormalOntime, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.normal.suggestDate", bundle: ..., traitCollection: ...)`
    static func statusNormalSuggestDate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusNormalSuggestDate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.normal.unknown", bundle: ..., traitCollection: ...)`
    static func statusNormalUnknown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusNormalUnknown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.small.accepted", bundle: ..., traitCollection: ...)`
    static func statusSmallAccepted(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusSmallAccepted, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.small.declined", bundle: ..., traitCollection: ...)`
    static func statusSmallDeclined(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusSmallDeclined, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.small.maybe", bundle: ..., traitCollection: ...)`
    static func statusSmallMaybe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusSmallMaybe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.small.ontime", bundle: ..., traitCollection: ...)`
    static func statusSmallOntime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusSmallOntime, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.small.suggestDate", bundle: ..., traitCollection: ...)`
    static func statusSmallSuggestDate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusSmallSuggestDate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.small.unknown", bundle: ..., traitCollection: ...)`
    static func statusSmallUnknown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusSmallUnknown, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  struct nib {
    /// Nib `AvatarView`.
    static let avatarView = _R.nib._AvatarView()
    /// Nib `NewEventGameCell`.
    static let newEventGameCell = _R.nib._NewEventGameCell()
    /// Nib `NewEventMemberCell`.
    static let newEventMemberCell = _R.nib._NewEventMemberCell()
    /// Nib `SearchEmptyResultCell`.
    static let searchEmptyResultCell = _R.nib._SearchEmptyResultCell()
    /// Nib `SearchGameCell`.
    static let searchGameCell = _R.nib._SearchGameCell()
    /// Nib `SearchMembersCell`.
    static let searchMembersCell = _R.nib._SearchMembersCell()
    
    /// `UINib(name: "AvatarView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.avatarView) instead")
    static func avatarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.avatarView)
    }
    
    /// `UINib(name: "NewEventGameCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newEventGameCell) instead")
    static func newEventGameCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newEventGameCell)
    }
    
    /// `UINib(name: "NewEventMemberCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newEventMemberCell) instead")
    static func newEventMemberCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newEventMemberCell)
    }
    
    /// `UINib(name: "SearchEmptyResultCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchEmptyResultCell) instead")
    static func searchEmptyResultCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchEmptyResultCell)
    }
    
    /// `UINib(name: "SearchGameCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchGameCell) instead")
    static func searchGameCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchGameCell)
    }
    
    /// `UINib(name: "SearchMembersCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchMembersCell) instead")
    static func searchMembersCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchMembersCell)
    }
    
    static func avatarView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.avatarView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func newEventGameCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewEventGameCell? {
      return R.nib.newEventGameCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewEventGameCell
    }
    
    static func newEventMemberCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewEventMemberCell? {
      return R.nib.newEventMemberCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewEventMemberCell
    }
    
    static func searchEmptyResultCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchEmptyResultCell? {
      return R.nib.searchEmptyResultCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchEmptyResultCell
    }
    
    static func searchGameCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchGameCell? {
      return R.nib.searchGameCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchGameCell
    }
    
    static func searchMembersCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchMembersCell? {
      return R.nib.searchMembersCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchMembersCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `NewEventGameCell`.
    static let newEventGameCell: Rswift.ReuseIdentifier<NewEventGameCell> = Rswift.ReuseIdentifier(identifier: "NewEventGameCell")
    /// Reuse identifier `NewEventMemberCell`.
    static let newEventMemberCell: Rswift.ReuseIdentifier<NewEventMemberCell> = Rswift.ReuseIdentifier(identifier: "NewEventMemberCell")
    /// Reuse identifier `SearchEmptyResultCell`.
    static let searchEmptyResultCell: Rswift.ReuseIdentifier<SearchEmptyResultCell> = Rswift.ReuseIdentifier(identifier: "SearchEmptyResultCell")
    /// Reuse identifier `SearchGameCell`.
    static let searchGameCell: Rswift.ReuseIdentifier<SearchGameCell> = Rswift.ReuseIdentifier(identifier: "SearchGameCell")
    /// Reuse identifier `SearchMembersCell`.
    static let searchMembersCell: Rswift.ReuseIdentifier<SearchMembersCell> = Rswift.ReuseIdentifier(identifier: "SearchMembersCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `Authorization`.
    static let authorization = _R.storyboard.authorization()
    /// Storyboard `Intro`.
    static let intro = _R.storyboard.intro()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `NewEvent`.
    static let newEvent = _R.storyboard.newEvent()
    /// Storyboard `Registration`.
    static let registration = _R.storyboard.registration()
    /// Storyboard `SearchGame`.
    static let searchGame = _R.storyboard.searchGame()
    /// Storyboard `SearchMembers`.
    static let searchMembers = _R.storyboard.searchMembers()
    
    /// `UIStoryboard(name: "Authorization", bundle: ...)`
    static func authorization(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.authorization)
    }
    
    /// `UIStoryboard(name: "Intro", bundle: ...)`
    static func intro(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.intro)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "NewEvent", bundle: ...)`
    static func newEvent(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newEvent)
    }
    
    /// `UIStoryboard(name: "Registration", bundle: ...)`
    static func registration(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.registration)
    }
    
    /// `UIStoryboard(name: "SearchGame", bundle: ...)`
    static func searchGame(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchGame)
    }
    
    /// `UIStoryboard(name: "SearchMembers", bundle: ...)`
    static func searchMembers(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.searchMembers)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 2 localization keys.
    struct infoPlist {
      /// Value: Предоставьте доступ к камере, чтобы сделать фотографию на ававрку
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Предоставьте доступ календарю, чтобы приложение смогло добавить новое событие
      static let nsCalendarsUsageDescription = Rswift.StringResource(key: "NSCalendarsUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Предоставьте доступ к камере, чтобы сделать фотографию на ававрку
      static func nsCameraUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Предоставьте доступ календарю, чтобы приложение смогло добавить новое событие
      static func nsCalendarsUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSCalendarsUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 160 localization keys.
    struct localizable {
      /// Value: %@ в %@
      static let statusFullDetails = Rswift.StringResource(key: "status.fullDetails", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ мин
      static let timeCarouselPanelLatnessValue = Rswift.StringResource(key: "timeCarouselPanel.latness.value", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %d символов
      static let registrationPasswordSymbolsCountLabelTitle = Rswift.StringResource(key: "registration.passwordSymbolsCountLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let authorizationEmailTextFieldPlaceholder = Rswift.StringResource(key: "authorization.emailTextField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let registrationEmailTextFieldPlaceholder = Rswift.StringResource(key: "registration.emailTextField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email введён не верно
      static let authorizationErrorEmailIncorrect = Rswift.StringResource(key: "authorization.error.email.incorrect", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email введён не верно
      static let registrationErrorEmailIncorret = Rswift.StringResource(key: "registration.error.email.incorret", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GG WP
      static let arkanoidWin2Message = Rswift.StringResource(key: "arkanoid.win.2.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Game Over
      static let arkanoidLose1Message = Rswift.StringResource(key: "arkanoid.lose.1.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Localizable
      static let tableName = Rswift.StringResource(key: "tableName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Winner Winner Chicken Dinner
      static let arkanoidWin4Message = Rswift.StringResource(key: "arkanoid.win.4.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YOU DIED
      static let arkanoidLose4Message = Rswift.StringResource(key: "arkanoid.lose.4.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Аккаунт
      static let profileSettingsAccountTitle = Rswift.StringResource(key: "profileSettings.account.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Аккаунт уже существует
      static let registrationErrorEmailAlreadyExist = Rswift.StringResource(key: "registration.error.email.alreadyExist", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Аккаунта на данном Email не существует
      static let authorizationErrorEmailNotExist = Rswift.StringResource(key: "authorization.error.email.notExist", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Активности
      static let reactionsSettingsCategory7Title = Rswift.StringResource(key: "reactionsSettings.category.7.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ближайшее событие
      static let eventsListSectionsActive = Rswift.StringResource(key: "eventsList.sections.active", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Большая буква
      static let registrationPasswordBigSymbolLabelTitle = Rswift.StringResource(key: "registration.passwordBigSymbolLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ваш свет угасает...
      static let arkanoidLose3Message = Rswift.StringResource(key: "arkanoid.lose.3.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Во сколько
      static let newEventChooseTimeLabelTitle = Rswift.StringResource(key: "newEvent.chooseTimeLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Во что
      static let newEventChooseGameLabelTitle = Rswift.StringResource(key: "newEvent.chooseGameLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вовремя
      static let statusOntimeShort = Rswift.StringResource(key: "status.ontime.short", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Возможно
      static let statusMaybeShort = Rswift.StringResource(key: "status.maybe.short", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Возможно, пойду
      static let statusMaybeFull = Rswift.StringResource(key: "status.maybe.full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Войти
      static let authorizationActionButtonTitle = Rswift.StringResource(key: "authorization.actionButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Войти
      static let introAuthButtonTitle = Rswift.StringResource(key: "intro.authButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Войти
      static let registrationLoginMessageHighlight = Rswift.StringResource(key: "registration.loginMessage.highlight", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Все реакции
      static let additionalReactionsTitle = Rswift.StringResource(key: "additionalReactions.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вход
      static let authorizationTitle = Rswift.StringResource(key: "authorization.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вы действительно хотите удалить данное событие?
      static let eventDetailsDeleteAlertTitle = Rswift.StringResource(key: "eventDetails.deleteAlert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вы можете создать событие сами, и пригласить друзей
      static let eventsListEmptySateDescription = Rswift.StringResource(key: "eventsList.emptySate.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вы уверены, что хотите выйти из аккаунта?
      static let profileSettingsLogoutMessage = Rswift.StringResource(key: "profileSettings.logout.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Вы чемпион
      static let arkanoidWin1Message = Rswift.StringResource(key: "arkanoid.win.1.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выберите реакцию на замену
      static let reactionsSettingsMessage = Rswift.StringResource(key: "reactionsSettings.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выбранные
      static let searchMembersSectionsSelected = Rswift.StringResource(key: "searchMembers.sections.selected", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выбрать %@
      static let commonChoose = Rswift.StringResource(key: "common.choose", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выбрать из галереи
      static let editProfileAlertChoosePhoto = Rswift.StringResource(key: "editProfile.alert.choosePhoto", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выйти
      static let profileSettingsLogoutTitle = Rswift.StringResource(key: "profileSettings.logout.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Выйти из аккаунта
      static let profileSettingsLogoutActionButton = Rswift.StringResource(key: "profileSettings.logout.actionButton", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Готово
      static let commonDone = Rswift.StringResource(key: "common.done", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Готово
      static let searchMembersDoneButtonTitle = Rswift.StringResource(key: "searchMembers.doneButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Для доступа к камере нужно разрешение
      static let editProfilePermissionsAlertTitle = Rswift.StringResource(key: "editProfile.permissionsAlert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Добавить участников
      static let eventDetailsAddMemberLabelTitle = Rswift.StringResource(key: "eventDetails.addMemberLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Допускается 12 символов, цифры, буквы, -_.~%+
      static let editProfileNameDescription = Rswift.StringResource(key: "editProfile.nameDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Еда и напитки
      static let reactionsSettingsCategory5Title = Rswift.StringResource(key: "reactionsSettings.category.5.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Еще
      static let eventsListInvitedEventMore = Rswift.StringResource(key: "eventsList.invitedEvent.more", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Животные и природа
      static let reactionsSettingsCategory4Title = Rswift.StringResource(key: "reactionsSettings.category.4.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Забыли пароль?
      static let authorizationRecoveryPasswordButtonTitle = Rswift.StringResource(key: "authorization.recoveryPasswordButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Завтра
      static let newEventTomorrowButtonTitle = Rswift.StringResource(key: "newEvent.tomorrowButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Здесь будут все ваши события
      static let eventsListEmptySateTitle = Rswift.StringResource(key: "eventsList.emptySate.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Игра в %@ начинается. Если вы опаздываете, то уточните свой статус
      static let notificationsEventStartRemindMessage = Rswift.StringResource(key: "notifications.eventStartRemind.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Избранные
      static let reactionsSettingsCategory0Title = Rswift.StringResource(key: "reactionsSettings.category.0.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Изи катка
      static let arkanoidWin3Message = Rswift.StringResource(key: "arkanoid.win.3.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Изменить
      static let editProfileChangeAvatar = Rswift.StringResource(key: "editProfile.changeAvatar", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Изменить
      static let timeCarouselPanelChangeTitle = Rswift.StringResource(key: "timeCarouselPanel.change.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Или пригласите по ссылке
      static let searchMembersEmptySateDescription = Rswift.StringResource(key: "searchMembers.emptySate.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Исключить
      static let eventMemberMenuItemDelete = Rswift.StringResource(key: "eventMemberMenuItem.delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ищите игры по названию
      static let searchGameEmptySateTitle = Rswift.StringResource(key: "searchGame.emptySate.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ищите участников по нику
      static let searchMembersEmptySateTitle = Rswift.StringResource(key: "searchMembers.emptySate.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Когда
      static let newEventChooseDayLabelTitle = Rswift.StringResource(key: "newEvent.chooseDayLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Коснитесь, чтобы начать
      static let arkanoidStartMessage = Rswift.StringResource(key: "arkanoid.start.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Люди и тело
      static let reactionsSettingsCategory3Title = Rswift.StringResource(key: "reactionsSettings.category.3.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Мои события
      static let eventsListSectionsFuture = Rswift.StringResource(key: "eventsList.sections.future", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Название игры
      static let searchGameSearchBarPlaceholder = Rswift.StringResource(key: "searchGame.searchBar.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Например, введите 'Overwatch' и посмотрите, что будет =)
      static let searchGameEmptySateDescription = Rswift.StringResource(key: "searchGame.emptySate.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Настройка реакции
      static let reactionsSettingsTitle = Rswift.StringResource(key: "reactionsSettings.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Настройки
      static let profileSettingsSectionSettingsTitle = Rswift.StringResource(key: "profileSettings.section.settings.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не пойду
      static let statusDeclinedFull = Rswift.StringResource(key: "status.declined.full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не пойду
      static let statusDeclinedShort = Rswift.StringResource(key: "status.declined.short", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не получилось найти игру =(
      static let searchGameEmptyResultsTitle = Rswift.StringResource(key: "searchGame.emptyResults.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не получилось найти человека =(
      static let searchMembersEmptyResultsTitle = Rswift.StringResource(key: "searchMembers.emptyResults.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось добавить реакцию
      static let errorsEventsServiceAddReaction = Rswift.StringResource(key: "errors.eventsService.addReaction", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось добавить участников
      static let errorsEventsServiceAddMember = Rswift.StringResource(key: "errors.eventsService.addMember", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось загрузить событие
      static let errorsEventsServiceFetchActiveEvent = Rswift.StringResource(key: "errors.eventsService.fetchActiveEvent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось загрузить события
      static let errorsEventsServiceFetchEvents = Rswift.StringResource(key: "errors.eventsService.fetchEvents", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось изменить дату события
      static let errorsEventsServiceChangeDate = Rswift.StringResource(key: "errors.eventsService.changeDate", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось изменить игру
      static let errorsEventsServiceChangeGame = Rswift.StringResource(key: "errors.eventsService.changeGame", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось изменить профиль
      static let errorsUserServiceEditProfile = Rswift.StringResource(key: "errors.userService.editProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось изменить статус
      static let errorsEventsServiceChangeStatus = Rswift.StringResource(key: "errors.eventsService.changeStatus", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось исключить участника
      static let errorsEventsServiceRemoveMember = Rswift.StringResource(key: "errors.eventsService.removeMember", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось получить данные профиля
      static let errorsUserServiceFetchProfile = Rswift.StringResource(key: "errors.userService.fetchProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось получить событие
      static let errorsEventsServiceAddEvent = Rswift.StringResource(key: "errors.eventsService.addEvent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось сделать лидером
      static let errorsEventsServiceTakeOwner = Rswift.StringResource(key: "errors.eventsService.takeOwner", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не удалось удалить событие
      static let errorsEventsServiceDeleteEvent = Rswift.StringResource(key: "errors.eventsService.deleteEvent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Неверный пароль
      static let authorizationErrorPasswordWrong = Rswift.StringResource(key: "authorization.error.password.wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Недавние
      static let reactionsSettingsCategory1Title = Rswift.StringResource(key: "reactionsSettings.category.1.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Нет аккаунта? Создать аккаунт
      static let authorizationRegisterMessage = Rswift.StringResource(key: "authorization.registerMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ник пользователя
      static let searchMembersSearchBarPlaceholder = Rswift.StringResource(key: "searchMembers.searchBar.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Никнейм
      static let editProfileNicknamePlaceholder = Rswift.StringResource(key: "editProfile.nickname.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Объекты
      static let reactionsSettingsCategory8Title = Rswift.StringResource(key: "reactionsSettings.category.8.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Опоздаю
      static let statusLateShort = Rswift.StringResource(key: "status.late.short", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Опоздаю на
      static let timeCarouselPanelLatnessTitle = Rswift.StringResource(key: "timeCarouselPanel.latness.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Опоздаю на %@ мин
      static let eventDetailsCellLateness = Rswift.StringResource(key: "eventDetails.cell.lateness", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Опоздаю на %d мин
      static let statusLateFull = Rswift.StringResource(key: "status.late.full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отклоненные события
      static let eventsListSectionsDeclined = Rswift.StringResource(key: "eventsList.sections.declined", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Открыть настройки
      static let editProfilePermissionsAlertSetting = Rswift.StringResource(key: "editProfile.permissionsAlert.setting", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отмена
      static let commonCancel = Rswift.StringResource(key: "common.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отмена
      static let searchGameCloseButtonTitle = Rswift.StringResource(key: "searchGame.closeButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отмена
      static let searchMembersCloseButtonTitle = Rswift.StringResource(key: "searchMembers.closeButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пароли не совпадают
      static let registrationErrorPasswordConfirmWrong = Rswift.StringResource(key: "registration.error.passwordConfirm.wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пароль
      static let authorizationPasswordTextFieldPlaceholder = Rswift.StringResource(key: "authorization.passwordTextField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Персонализация
      static let personalisationTitle = Rswift.StringResource(key: "personalisation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Победа
      static let arkanoidWin0Message = Rswift.StringResource(key: "arkanoid.win.0.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Подтвердите пароль
      static let registrationPasswordConfirmTextFieldPlaceholder = Rswift.StringResource(key: "registration.passwordConfirmTextField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Подтвердите свой статус
      static let notificationsStatusRemindTitle = Rswift.StringResource(key: "notifications.statusRemind.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Подтвердить статус
      static let statusConfirmation = Rswift.StringResource(key: "status.confirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поиск игры
      static let newEventSearchGameButtonTitle = Rswift.StringResource(key: "newEvent.searchGameButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поиск игры
      static let searchGameTitle = Rswift.StringResource(key: "searchGame.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поиск участников
      static let newEventSearchMembersButtonTitle = Rswift.StringResource(key: "newEvent.searchMembersButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поиск участников
      static let searchMembersTitle = Rswift.StringResource(key: "searchMembers.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пойду
      static let statusAcceptedFull = Rswift.StringResource(key: "status.accepted.full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пойду
      static let statusAcceptedShort = Rswift.StringResource(key: "status.accepted.short", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Поражение
      static let arkanoidLose0Message = Rswift.StringResource(key: "arkanoid.lose.0.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Потрачено
      static let arkanoidLose2Message = Rswift.StringResource(key: "arkanoid.lose.2.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Предлагаю
      static let timeCarouselPanelSuggestionTitle = Rswift.StringResource(key: "timeCarouselPanel.suggestion.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Предлагаю "%@"
      static let eventDetailsCellSuggestDate = Rswift.StringResource(key: "eventDetails.cell.suggestDate", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Предлагаю в
      static let statusSuggestDateFull = Rswift.StringResource(key: "status.suggestDate.full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Предложить время
      static let statusSuggestDateShort = Rswift.StringResource(key: "status.suggestDate.short", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пригласить по ссылке
      static let searchMembersInviteByLinkTitle = Rswift.StringResource(key: "searchMembers.inviteByLink.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Приглашен
      static let statusUnknownFull = Rswift.StringResource(key: "status.unknown.full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Приглашен
      static let statusUnknownShort = Rswift.StringResource(key: "status.unknown.short", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Приглашения
      static let eventsListSectionsInvited = Rswift.StringResource(key: "eventsList.sections.invited", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Приду вовремя
      static let statusOntimeFull = Rswift.StringResource(key: "status.ontime.full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Придумайте пароль
      static let registrationPasswordTextFieldPlaceholder = Rswift.StringResource(key: "registration.passwordTextField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Произошла неизвестная ошибка
      static let errorsUnknown = Rswift.StringResource(key: "errors.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Профиль
      static let profileTitle = Rswift.StringResource(key: "profile.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Путешествия и места
      static let reactionsSettingsCategory6Title = Rswift.StringResource(key: "reactionsSettings.category.6.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Реакции
      static let profileSettingsReactionsTitle = Rswift.StringResource(key: "profileSettings.reactions.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Редактирование
      static let editProfileTitle = Rswift.StringResource(key: "editProfile.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Редактирование
      static let eventDetailsEditTitle = Rswift.StringResource(key: "eventDetails.edit.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Редактировать профиль
      static let profileSettingsEditTitle = Rswift.StringResource(key: "profileSettings.edit.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Результаты поиска
      static let searchGameSectionsSearchResults = Rswift.StringResource(key: "searchGame.sections.searchResults", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Результаты поиска
      static let searchMembersSectionsSearchResults = Rswift.StringResource(key: "searchMembers.sections.searchResults", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: С кем
      static let newEventChooseMembersLabelTitle = Rswift.StringResource(key: "newEvent.chooseMembersLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Свернуть
      static let eventsListDeclinedEventsHide = Rswift.StringResource(key: "eventsList.declinedEvents.hide", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сделать лидером
      static let eventMemberMenuItemMakeOwner = Rswift.StringResource(key: "eventMemberMenuItem.makeOwner", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сделать фото
      static let editProfileAlertMakePhoto = Rswift.StringResource(key: "editProfile.alert.makePhoto", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сегодня
      static let newEventTodayButtonTitle = Rswift.StringResource(key: "newEvent.todayButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Символы
      static let reactionsSettingsCategory9Title = Rswift.StringResource(key: "reactionsSettings.category.9.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Смайлики и эмоции
      static let reactionsSettingsCategory2Title = Rswift.StringResource(key: "reactionsSettings.category.2.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сменить пароль
      static let profileSettingsChangePasswordTitle = Rswift.StringResource(key: "profileSettings.changePassword.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сменить профиль
      static let profileExitButtonTitle = Rswift.StringResource(key: "profile.exitButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Событие начинается
      static let notificationsEventStartRemindTitle = Rswift.StringResource(key: "notifications.eventStartRemind.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Создание события
      static let newEventTitle = Rswift.StringResource(key: "newEvent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Создать аккаунт
      static let authorizationRegisterMessageHighlight = Rswift.StringResource(key: "authorization.registerMessage.highlight", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Создать аккаунт
      static let introRegisterButtonTitle = Rswift.StringResource(key: "intro.registerButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Создать аккаунт
      static let registrationActionButtonTitle = Rswift.StringResource(key: "registration.actionButton.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Создать аккаунт
      static let registrationTitle = Rswift.StringResource(key: "registration.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Создать событие
      static let newEventMainActionTitle = Rswift.StringResource(key: "newEvent.mainAction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Сохранить изменения
      static let editProfileSaveButton = Rswift.StringResource(key: "editProfile.saveButton", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: У Вас через %d мин. игра в %@. Уточните свой статус для других участников
      static let notificationsStatusRemindMessage = Rswift.StringResource(key: "notifications.statusRemind.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Убить время
      static let profileSettingsMiniGamesTitle = Rswift.StringResource(key: "profileSettings.miniGames.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Уведомления
      static let profileSettingsNotificationsTitle = Rswift.StringResource(key: "profileSettings.notifications.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Удалить
      static let commonDelete = Rswift.StringResource(key: "common.delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Уже есть аккаунт? Войти
      static let registrationLoginMessage = Rswift.StringResource(key: "registration.loginMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Управление аккаунтом
      static let profileSettingsSectionAccountTitle = Rswift.StringResource(key: "profileSettings.section.account.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Флаги
      static let reactionsSettingsCategory10Title = Rswift.StringResource(key: "reactionsSettings.category.10.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Цифра
      static let registrationPasswordNumericSymbolsLabelTitle = Rswift.StringResource(key: "registration.passwordNumericSymbolsLabel.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Частые игры
      static let searchGameSectionsOfften = Rswift.StringResource(key: "searchGame.sections.offten", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Частые участники
      static let searchMembersSectionsOfften = Rswift.StringResource(key: "searchMembers.sections.offten", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: %@ в %@
      static func statusFullDetails(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("status.fullDetails", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: %@ мин
      static func timeCarouselPanelLatnessValue(_ value1: String) -> String {
        return String(format: NSLocalizedString("timeCarouselPanel.latness.value", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %d символов
      static func registrationPasswordSymbolsCountLabelTitle(_ value1: Int) -> String {
        return String(format: NSLocalizedString("registration.passwordSymbolsCountLabel.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Email
      static func authorizationEmailTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("authorization.emailTextField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email
      static func registrationEmailTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("registration.emailTextField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email введён не верно
      static func authorizationErrorEmailIncorrect(_: Void = ()) -> String {
        return NSLocalizedString("authorization.error.email.incorrect", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email введён не верно
      static func registrationErrorEmailIncorret(_: Void = ()) -> String {
        return NSLocalizedString("registration.error.email.incorret", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: GG WP
      static func arkanoidWin2Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.win.2.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Game Over
      static func arkanoidLose1Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.lose.1.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Localizable
      static func tableName(_: Void = ()) -> String {
        return NSLocalizedString("tableName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Winner Winner Chicken Dinner
      static func arkanoidWin4Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.win.4.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: YOU DIED
      static func arkanoidLose4Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.lose.4.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Аккаунт
      static func profileSettingsAccountTitle(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.account.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Аккаунт уже существует
      static func registrationErrorEmailAlreadyExist(_: Void = ()) -> String {
        return NSLocalizedString("registration.error.email.alreadyExist", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Аккаунта на данном Email не существует
      static func authorizationErrorEmailNotExist(_: Void = ()) -> String {
        return NSLocalizedString("authorization.error.email.notExist", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Активности
      static func reactionsSettingsCategory7Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.7.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ближайшее событие
      static func eventsListSectionsActive(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.sections.active", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Большая буква
      static func registrationPasswordBigSymbolLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("registration.passwordBigSymbolLabel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ваш свет угасает...
      static func arkanoidLose3Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.lose.3.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Во сколько
      static func newEventChooseTimeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.chooseTimeLabel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Во что
      static func newEventChooseGameLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.chooseGameLabel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вовремя
      static func statusOntimeShort(_: Void = ()) -> String {
        return NSLocalizedString("status.ontime.short", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Возможно
      static func statusMaybeShort(_: Void = ()) -> String {
        return NSLocalizedString("status.maybe.short", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Возможно, пойду
      static func statusMaybeFull(_: Void = ()) -> String {
        return NSLocalizedString("status.maybe.full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Войти
      static func authorizationActionButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("authorization.actionButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Войти
      static func introAuthButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("intro.authButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Войти
      static func registrationLoginMessageHighlight(_: Void = ()) -> String {
        return NSLocalizedString("registration.loginMessage.highlight", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Все реакции
      static func additionalReactionsTitle(_: Void = ()) -> String {
        return NSLocalizedString("additionalReactions.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вход
      static func authorizationTitle(_: Void = ()) -> String {
        return NSLocalizedString("authorization.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вы действительно хотите удалить данное событие?
      static func eventDetailsDeleteAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("eventDetails.deleteAlert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вы можете создать событие сами, и пригласить друзей
      static func eventsListEmptySateDescription(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.emptySate.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вы уверены, что хотите выйти из аккаунта?
      static func profileSettingsLogoutMessage(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.logout.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Вы чемпион
      static func arkanoidWin1Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.win.1.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выберите реакцию на замену
      static func reactionsSettingsMessage(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выбранные
      static func searchMembersSectionsSelected(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.sections.selected", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выбрать %@
      static func commonChoose(_ value1: String) -> String {
        return String(format: NSLocalizedString("common.choose", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Выбрать из галереи
      static func editProfileAlertChoosePhoto(_: Void = ()) -> String {
        return NSLocalizedString("editProfile.alert.choosePhoto", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выйти
      static func profileSettingsLogoutTitle(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.logout.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Выйти из аккаунта
      static func profileSettingsLogoutActionButton(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.logout.actionButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Готово
      static func commonDone(_: Void = ()) -> String {
        return NSLocalizedString("common.done", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Готово
      static func searchMembersDoneButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.doneButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Для доступа к камере нужно разрешение
      static func editProfilePermissionsAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("editProfile.permissionsAlert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Добавить участников
      static func eventDetailsAddMemberLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("eventDetails.addMemberLabel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Допускается 12 символов, цифры, буквы, -_.~%+
      static func editProfileNameDescription(_: Void = ()) -> String {
        return NSLocalizedString("editProfile.nameDescription", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Еда и напитки
      static func reactionsSettingsCategory5Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.5.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Еще
      static func eventsListInvitedEventMore(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.invitedEvent.more", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Животные и природа
      static func reactionsSettingsCategory4Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.4.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Забыли пароль?
      static func authorizationRecoveryPasswordButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("authorization.recoveryPasswordButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Завтра
      static func newEventTomorrowButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.tomorrowButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Здесь будут все ваши события
      static func eventsListEmptySateTitle(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.emptySate.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Игра в %@ начинается. Если вы опаздываете, то уточните свой статус
      static func notificationsEventStartRemindMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("notifications.eventStartRemind.message", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Избранные
      static func reactionsSettingsCategory0Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.0.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Изи катка
      static func arkanoidWin3Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.win.3.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Изменить
      static func editProfileChangeAvatar(_: Void = ()) -> String {
        return NSLocalizedString("editProfile.changeAvatar", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Изменить
      static func timeCarouselPanelChangeTitle(_: Void = ()) -> String {
        return NSLocalizedString("timeCarouselPanel.change.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Или пригласите по ссылке
      static func searchMembersEmptySateDescription(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.emptySate.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Исключить
      static func eventMemberMenuItemDelete(_: Void = ()) -> String {
        return NSLocalizedString("eventMemberMenuItem.delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ищите игры по названию
      static func searchGameEmptySateTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchGame.emptySate.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ищите участников по нику
      static func searchMembersEmptySateTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.emptySate.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Когда
      static func newEventChooseDayLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.chooseDayLabel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Коснитесь, чтобы начать
      static func arkanoidStartMessage(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.start.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Люди и тело
      static func reactionsSettingsCategory3Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.3.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Мои события
      static func eventsListSectionsFuture(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.sections.future", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Название игры
      static func searchGameSearchBarPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("searchGame.searchBar.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Например, введите 'Overwatch' и посмотрите, что будет =)
      static func searchGameEmptySateDescription(_: Void = ()) -> String {
        return NSLocalizedString("searchGame.emptySate.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Настройка реакции
      static func reactionsSettingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Настройки
      static func profileSettingsSectionSettingsTitle(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.section.settings.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не пойду
      static func statusDeclinedFull(_: Void = ()) -> String {
        return NSLocalizedString("status.declined.full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не пойду
      static func statusDeclinedShort(_: Void = ()) -> String {
        return NSLocalizedString("status.declined.short", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не получилось найти игру =(
      static func searchGameEmptyResultsTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchGame.emptyResults.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не получилось найти человека =(
      static func searchMembersEmptyResultsTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.emptyResults.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось добавить реакцию
      static func errorsEventsServiceAddReaction(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.addReaction", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось добавить участников
      static func errorsEventsServiceAddMember(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.addMember", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось загрузить событие
      static func errorsEventsServiceFetchActiveEvent(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.fetchActiveEvent", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось загрузить события
      static func errorsEventsServiceFetchEvents(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.fetchEvents", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось изменить дату события
      static func errorsEventsServiceChangeDate(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.changeDate", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось изменить игру
      static func errorsEventsServiceChangeGame(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.changeGame", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось изменить профиль
      static func errorsUserServiceEditProfile(_: Void = ()) -> String {
        return NSLocalizedString("errors.userService.editProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось изменить статус
      static func errorsEventsServiceChangeStatus(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.changeStatus", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось исключить участника
      static func errorsEventsServiceRemoveMember(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.removeMember", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось получить данные профиля
      static func errorsUserServiceFetchProfile(_: Void = ()) -> String {
        return NSLocalizedString("errors.userService.fetchProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось получить событие
      static func errorsEventsServiceAddEvent(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.addEvent", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось сделать лидером
      static func errorsEventsServiceTakeOwner(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.takeOwner", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не удалось удалить событие
      static func errorsEventsServiceDeleteEvent(_: Void = ()) -> String {
        return NSLocalizedString("errors.eventsService.deleteEvent", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Неверный пароль
      static func authorizationErrorPasswordWrong(_: Void = ()) -> String {
        return NSLocalizedString("authorization.error.password.wrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Недавние
      static func reactionsSettingsCategory1Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.1.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Нет аккаунта? Создать аккаунт
      static func authorizationRegisterMessage(_: Void = ()) -> String {
        return NSLocalizedString("authorization.registerMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ник пользователя
      static func searchMembersSearchBarPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.searchBar.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Никнейм
      static func editProfileNicknamePlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("editProfile.nickname.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Объекты
      static func reactionsSettingsCategory8Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.8.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Опоздаю
      static func statusLateShort(_: Void = ()) -> String {
        return NSLocalizedString("status.late.short", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Опоздаю на
      static func timeCarouselPanelLatnessTitle(_: Void = ()) -> String {
        return NSLocalizedString("timeCarouselPanel.latness.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Опоздаю на %@ мин
      static func eventDetailsCellLateness(_ value1: String) -> String {
        return String(format: NSLocalizedString("eventDetails.cell.lateness", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Опоздаю на %d мин
      static func statusLateFull(_ value1: Int) -> String {
        return String(format: NSLocalizedString("status.late.full", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Отклоненные события
      static func eventsListSectionsDeclined(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.sections.declined", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Открыть настройки
      static func editProfilePermissionsAlertSetting(_: Void = ()) -> String {
        return NSLocalizedString("editProfile.permissionsAlert.setting", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Отмена
      static func commonCancel(_: Void = ()) -> String {
        return NSLocalizedString("common.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Отмена
      static func searchGameCloseButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchGame.closeButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Отмена
      static func searchMembersCloseButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.closeButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пароли не совпадают
      static func registrationErrorPasswordConfirmWrong(_: Void = ()) -> String {
        return NSLocalizedString("registration.error.passwordConfirm.wrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пароль
      static func authorizationPasswordTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("authorization.passwordTextField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Персонализация
      static func personalisationTitle(_: Void = ()) -> String {
        return NSLocalizedString("personalisation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Победа
      static func arkanoidWin0Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.win.0.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Подтвердите пароль
      static func registrationPasswordConfirmTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("registration.passwordConfirmTextField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Подтвердите свой статус
      static func notificationsStatusRemindTitle(_: Void = ()) -> String {
        return NSLocalizedString("notifications.statusRemind.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Подтвердить статус
      static func statusConfirmation(_: Void = ()) -> String {
        return NSLocalizedString("status.confirmation", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Поиск игры
      static func newEventSearchGameButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.searchGameButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Поиск игры
      static func searchGameTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchGame.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Поиск участников
      static func newEventSearchMembersButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.searchMembersButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Поиск участников
      static func searchMembersTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пойду
      static func statusAcceptedFull(_: Void = ()) -> String {
        return NSLocalizedString("status.accepted.full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пойду
      static func statusAcceptedShort(_: Void = ()) -> String {
        return NSLocalizedString("status.accepted.short", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Поражение
      static func arkanoidLose0Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.lose.0.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Потрачено
      static func arkanoidLose2Message(_: Void = ()) -> String {
        return NSLocalizedString("arkanoid.lose.2.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Предлагаю
      static func timeCarouselPanelSuggestionTitle(_: Void = ()) -> String {
        return NSLocalizedString("timeCarouselPanel.suggestion.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Предлагаю "%@"
      static func eventDetailsCellSuggestDate(_ value1: String) -> String {
        return String(format: NSLocalizedString("eventDetails.cell.suggestDate", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Предлагаю в
      static func statusSuggestDateFull(_: Void = ()) -> String {
        return NSLocalizedString("status.suggestDate.full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Предложить время
      static func statusSuggestDateShort(_: Void = ()) -> String {
        return NSLocalizedString("status.suggestDate.short", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пригласить по ссылке
      static func searchMembersInviteByLinkTitle(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.inviteByLink.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Приглашен
      static func statusUnknownFull(_: Void = ()) -> String {
        return NSLocalizedString("status.unknown.full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Приглашен
      static func statusUnknownShort(_: Void = ()) -> String {
        return NSLocalizedString("status.unknown.short", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Приглашения
      static func eventsListSectionsInvited(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.sections.invited", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Приду вовремя
      static func statusOntimeFull(_: Void = ()) -> String {
        return NSLocalizedString("status.ontime.full", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Придумайте пароль
      static func registrationPasswordTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("registration.passwordTextField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Произошла неизвестная ошибка
      static func errorsUnknown(_: Void = ()) -> String {
        return NSLocalizedString("errors.unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Профиль
      static func profileTitle(_: Void = ()) -> String {
        return NSLocalizedString("profile.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Путешествия и места
      static func reactionsSettingsCategory6Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.6.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Реакции
      static func profileSettingsReactionsTitle(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.reactions.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Редактирование
      static func editProfileTitle(_: Void = ()) -> String {
        return NSLocalizedString("editProfile.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Редактирование
      static func eventDetailsEditTitle(_: Void = ()) -> String {
        return NSLocalizedString("eventDetails.edit.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Редактировать профиль
      static func profileSettingsEditTitle(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.edit.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Результаты поиска
      static func searchGameSectionsSearchResults(_: Void = ()) -> String {
        return NSLocalizedString("searchGame.sections.searchResults", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Результаты поиска
      static func searchMembersSectionsSearchResults(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.sections.searchResults", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: С кем
      static func newEventChooseMembersLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.chooseMembersLabel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Свернуть
      static func eventsListDeclinedEventsHide(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.declinedEvents.hide", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сделать лидером
      static func eventMemberMenuItemMakeOwner(_: Void = ()) -> String {
        return NSLocalizedString("eventMemberMenuItem.makeOwner", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сделать фото
      static func editProfileAlertMakePhoto(_: Void = ()) -> String {
        return NSLocalizedString("editProfile.alert.makePhoto", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сегодня
      static func newEventTodayButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.todayButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Символы
      static func reactionsSettingsCategory9Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.9.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Смайлики и эмоции
      static func reactionsSettingsCategory2Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.2.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сменить пароль
      static func profileSettingsChangePasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.changePassword.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сменить профиль
      static func profileExitButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("profile.exitButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Событие начинается
      static func notificationsEventStartRemindTitle(_: Void = ()) -> String {
        return NSLocalizedString("notifications.eventStartRemind.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Создание события
      static func newEventTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Создать аккаунт
      static func authorizationRegisterMessageHighlight(_: Void = ()) -> String {
        return NSLocalizedString("authorization.registerMessage.highlight", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Создать аккаунт
      static func introRegisterButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("intro.registerButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Создать аккаунт
      static func registrationActionButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("registration.actionButton.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Создать аккаунт
      static func registrationTitle(_: Void = ()) -> String {
        return NSLocalizedString("registration.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Создать событие
      static func newEventMainActionTitle(_: Void = ()) -> String {
        return NSLocalizedString("newEvent.mainAction.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Сохранить изменения
      static func editProfileSaveButton(_: Void = ()) -> String {
        return NSLocalizedString("editProfile.saveButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: У Вас через %d мин. игра в %@. Уточните свой статус для других участников
      static func notificationsStatusRemindMessage(_ value1: Int, _ value2: String) -> String {
        return String(format: NSLocalizedString("notifications.statusRemind.message", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Убить время
      static func profileSettingsMiniGamesTitle(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.miniGames.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Уведомления
      static func profileSettingsNotificationsTitle(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.notifications.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Удалить
      static func commonDelete(_: Void = ()) -> String {
        return NSLocalizedString("common.delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Уже есть аккаунт? Войти
      static func registrationLoginMessage(_: Void = ()) -> String {
        return NSLocalizedString("registration.loginMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Управление аккаунтом
      static func profileSettingsSectionAccountTitle(_: Void = ()) -> String {
        return NSLocalizedString("profileSettings.section.account.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Флаги
      static func reactionsSettingsCategory10Title(_: Void = ()) -> String {
        return NSLocalizedString("reactionsSettings.category.10.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Цифра
      static func registrationPasswordNumericSymbolsLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("registration.passwordNumericSymbolsLabel.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Частые игры
      static func searchGameSectionsOfften(_: Void = ()) -> String {
        return NSLocalizedString("searchGame.sections.offten", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Частые участники
      static func searchMembersSectionsOfften(_: Void = ()) -> String {
        return NSLocalizedString("searchMembers.sections.offten", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _NewEventGameCell.validate()
      try _NewEventMemberCell.validate()
      try _SearchGameCell.validate()
      try _SearchMembersCell.validate()
    }
    
    struct _AvatarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AvatarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NewEventGameCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NewEventGameCell
      
      let bundle = R.hostingBundle
      let identifier = "NewEventGameCell"
      let name = "NewEventGameCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewEventGameCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewEventGameCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "status.small.accepted", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'status.small.accepted' is used in nib 'NewEventGameCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "action.accent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'action.accent' is used in storyboard 'NewEventGameCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'NewEventGameCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _NewEventMemberCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = NewEventMemberCell
      
      let bundle = R.hostingBundle
      let identifier = "NewEventMemberCell"
      let name = "NewEventMemberCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewEventMemberCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewEventMemberCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "status.small.accepted", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'status.small.accepted' is used in nib 'NewEventMemberCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'NewEventMemberCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "block", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'block' is used in storyboard 'NewEventMemberCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.primary' is used in storyboard 'NewEventMemberCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchEmptyResultCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchEmptyResultCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchEmptyResultCell"
      let name = "SearchEmptyResultCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchEmptyResultCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchEmptyResultCell
      }
      
      fileprivate init() {}
    }
    
    struct _SearchGameCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SearchGameCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchGameCell"
      let name = "SearchGameCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchGameCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchGameCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "status.normal.accepted", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'status.normal.accepted' is used in nib 'SearchGameCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "action.accent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'action.accent' is used in storyboard 'SearchGameCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'SearchGameCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "block", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'block' is used in storyboard 'SearchGameCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.primary' is used in storyboard 'SearchGameCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchMembersCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SearchMembersCell
      
      let bundle = R.hostingBundle
      let identifier = "SearchMembersCell"
      let name = "SearchMembersCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchMembersCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchMembersCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "status.normal.accepted", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'status.normal.accepted' is used in nib 'SearchMembersCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'SearchMembersCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.secondary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.secondary' is used in storyboard 'SearchMembersCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try authorization.validate()
      try intro.validate()
      try launchScreen.validate()
      try newEvent.validate()
      try registration.validate()
      try searchGame.validate()
      try searchMembers.validate()
    }
    
    struct authorization: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AuthorizationViewController
      
      let authorizationViewController = StoryboardViewControllerResource<AuthorizationViewController>(identifier: "AuthorizationViewController")
      let bundle = R.hostingBundle
      let name = "Authorization"
      
      func authorizationViewController(_: Void = ()) -> AuthorizationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: authorizationViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common.show", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common.show' is used in storyboard 'Authorization', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "action.accent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'action.accent' is used in storyboard 'Authorization', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'Authorization', but couldn't be loaded.") }
          if UIKit.UIColor(named: "input", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'input' is used in storyboard 'Authorization', but couldn't be loaded.") }
          if UIKit.UIColor(named: "red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'red' is used in storyboard 'Authorization', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.primary' is used in storyboard 'Authorization', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.secondary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.secondary' is used in storyboard 'Authorization', but couldn't be loaded.") }
        }
        if _R.storyboard.authorization().authorizationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'authorizationViewController' could not be loaded from storyboard 'Authorization' as 'AuthorizationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct intro: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = IntroViewController
      
      let bundle = R.hostingBundle
      let introViewController = StoryboardViewControllerResource<IntroViewController>(identifier: "IntroViewController")
      let name = "Intro"
      
      func introViewController(_: Void = ()) -> IntroViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: introViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common.logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common.logo' is used in storyboard 'Intro', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "action.accent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'action.accent' is used in storyboard 'Intro', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'Intro', but couldn't be loaded.") }
          if UIKit.UIColor(named: "block", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'block' is used in storyboard 'Intro', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.primary' is used in storyboard 'Intro', but couldn't be loaded.") }
        }
        if _R.storyboard.intro().introViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'introViewController' could not be loaded from storyboard 'Intro' as 'IntroViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "common.logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common.logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct newEvent: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewEventViewController
      
      let bundle = R.hostingBundle
      let name = "NewEvent"
      let newEventViewController = StoryboardViewControllerResource<NewEventViewController>(identifier: "NewEventViewController")
      
      func newEventViewController(_: Void = ()) -> NewEventViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newEventViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common.calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common.calendar' is used in storyboard 'NewEvent', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "action.accent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'action.accent' is used in storyboard 'NewEvent', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'NewEvent', but couldn't be loaded.") }
          if UIKit.UIColor(named: "block", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'block' is used in storyboard 'NewEvent', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.primary' is used in storyboard 'NewEvent', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.secondary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.secondary' is used in storyboard 'NewEvent', but couldn't be loaded.") }
        }
        if _R.storyboard.newEvent().newEventViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newEventViewController' could not be loaded from storyboard 'NewEvent' as 'NewEventViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct registration: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RegistrationViewController
      
      let bundle = R.hostingBundle
      let name = "Registration"
      let registrationViewController = StoryboardViewControllerResource<RegistrationViewController>(identifier: "RegistrationViewController")
      
      func registrationViewController(_: Void = ()) -> RegistrationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registrationViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common.show", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common.show' is used in storyboard 'Registration', but couldn't be loaded.") }
        if UIKit.UIImage(named: "status.normal.accepted", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'status.normal.accepted' is used in storyboard 'Registration', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "action.accent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'action.accent' is used in storyboard 'Registration', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'Registration', but couldn't be loaded.") }
          if UIKit.UIColor(named: "input", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'input' is used in storyboard 'Registration', but couldn't be loaded.") }
          if UIKit.UIColor(named: "red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'red' is used in storyboard 'Registration', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.primary' is used in storyboard 'Registration', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text.secondary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text.secondary' is used in storyboard 'Registration', but couldn't be loaded.") }
        }
        if _R.storyboard.registration().registrationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registrationViewController' could not be loaded from storyboard 'Registration' as 'RegistrationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct searchGame: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchGameViewController
      
      let bundle = R.hostingBundle
      let name = "SearchGame"
      let searchGameViewController = StoryboardViewControllerResource<SearchGameViewController>(identifier: "SearchGameViewController")
      
      func searchGameViewController(_: Void = ()) -> SearchGameViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchGameViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'SearchGame', but couldn't be loaded.") }
          if UIKit.UIColor(named: "block", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'block' is used in storyboard 'SearchGame', but couldn't be loaded.") }
        }
        if _R.storyboard.searchGame().searchGameViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchGameViewController' could not be loaded from storyboard 'SearchGame' as 'SearchGameViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct searchMembers: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchMembersViewController
      
      let bundle = R.hostingBundle
      let name = "SearchMembers"
      let searchMembersViewController = StoryboardViewControllerResource<SearchMembersViewController>(identifier: "SearchMembersViewController")
      
      func searchMembersViewController(_: Void = ()) -> SearchMembersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchMembersViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "common.link", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'common.link' is used in storyboard 'SearchMembers', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "action.accent", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'action.accent' is used in storyboard 'SearchMembers', but couldn't be loaded.") }
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'SearchMembers', but couldn't be loaded.") }
          if UIKit.UIColor(named: "block", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'block' is used in storyboard 'SearchMembers', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shape.background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shape.background' is used in storyboard 'SearchMembers', but couldn't be loaded.") }
        }
        if _R.storyboard.searchMembers().searchMembersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchMembersViewController' could not be loaded from storyboard 'SearchMembers' as 'SearchMembersViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
