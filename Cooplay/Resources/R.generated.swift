//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 11 colors.
  struct color {
    /// Color `action.accent`.
    static let actionAccent = Rswift.ColorResource(bundle: R.hostingBundle, name: "action.accent")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `block`.
    static let block = Rswift.ColorResource(bundle: R.hostingBundle, name: "block")
    /// Color `shape.background`.
    static let shapeBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "shape.background")
    /// Color `status.declined`.
    static let statusDeclined = Rswift.ColorResource(bundle: R.hostingBundle, name: "status.declined")
    /// Color `status.late`.
    static let statusLate = Rswift.ColorResource(bundle: R.hostingBundle, name: "status.late")
    /// Color `status.maybe`.
    static let statusMaybe = Rswift.ColorResource(bundle: R.hostingBundle, name: "status.maybe")
    /// Color `status.ontime`.
    static let statusOntime = Rswift.ColorResource(bundle: R.hostingBundle, name: "status.ontime")
    /// Color `status.unknown`.
    static let statusUnknown = Rswift.ColorResource(bundle: R.hostingBundle, name: "status.unknown")
    /// Color `text.primary`.
    static let textPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "text.primary")
    /// Color `text.secondary`.
    static let textSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "text.secondary")
    
    /// `UIColor(named: "action.accent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func actionAccent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.actionAccent, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "block", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func block(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.block, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "shape.background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shapeBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shapeBackground, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "status.declined", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func statusDeclined(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.statusDeclined, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "status.late", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func statusLate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.statusLate, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "status.maybe", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func statusMaybe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.statusMaybe, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "status.ontime", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func statusOntime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.statusOntime, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "status.unknown", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func statusUnknown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.statusUnknown, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "text.primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textPrimary, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "text.secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textSecondary, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 9 images.
  struct image {
    /// Image `common.details`.
    static let commonDetails = Rswift.ImageResource(bundle: R.hostingBundle, name: "common.details")
    /// Image `status.declined.small`.
    static let statusDeclinedSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.declined.small")
    /// Image `status.declined`.
    static let statusDeclined = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.declined")
    /// Image `status.maybe.small`.
    static let statusMaybeSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.maybe.small")
    /// Image `status.maybe`.
    static let statusMaybe = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.maybe")
    /// Image `status.ontime.small`.
    static let statusOntimeSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.ontime.small")
    /// Image `status.ontime`.
    static let statusOntime = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.ontime")
    /// Image `status.unknown.small`.
    static let statusUnknownSmall = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.unknown.small")
    /// Image `status.unknown`.
    static let statusUnknown = Rswift.ImageResource(bundle: R.hostingBundle, name: "status.unknown")
    
    /// `UIImage(named: "common.details", bundle: ..., traitCollection: ...)`
    static func commonDetails(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonDetails, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.declined", bundle: ..., traitCollection: ...)`
    static func statusDeclined(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusDeclined, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.declined.small", bundle: ..., traitCollection: ...)`
    static func statusDeclinedSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusDeclinedSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.maybe", bundle: ..., traitCollection: ...)`
    static func statusMaybe(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusMaybe, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.maybe.small", bundle: ..., traitCollection: ...)`
    static func statusMaybeSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusMaybeSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.ontime", bundle: ..., traitCollection: ...)`
    static func statusOntime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusOntime, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.ontime.small", bundle: ..., traitCollection: ...)`
    static func statusOntimeSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusOntimeSmall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.unknown", bundle: ..., traitCollection: ...)`
    static func statusUnknown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusUnknown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "status.unknown.small", bundle: ..., traitCollection: ...)`
    static func statusUnknownSmall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.statusUnknownSmall, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `AvatarView`.
    static let avatarView = _R.nib._AvatarView()
    /// Nib `EventCell`.
    static let eventCell = _R.nib._EventCell()
    
    /// `UINib(name: "AvatarView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.avatarView) instead")
    static func avatarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.avatarView)
    }
    
    /// `UINib(name: "EventCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventCell) instead")
    static func eventCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventCell)
    }
    
    static func avatarView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.avatarView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func eventCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventCell? {
      return R.nib.eventCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `EventCell`.
    static let eventCell: Rswift.ReuseIdentifier<EventCell> = Rswift.ReuseIdentifier(identifier: "EventCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `EventsList`.
    static let eventsList = _R.storyboard.eventsList()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "EventsList", bundle: ...)`
    static func eventsList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.eventsList)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 11 localization keys.
    struct localizable {
      /// Value: Localizable
      static let tableName = Rswift.StringResource(key: "tableName", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ближайшее событие
      static let eventsListSectionsActive = Rswift.StringResource(key: "eventsList.sections.active", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Будущие события
      static let eventsListSectionsFuture = Rswift.StringResource(key: "eventsList.sections.future", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Возможно
      static let commonStatusesMaybe = Rswift.StringResource(key: "common.statuses.maybe", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Все события
      static let eventsListTitle = Rswift.StringResource(key: "eventsList.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Не пойду
      static let commonStatusesDeclined = Rswift.StringResource(key: "common.statuses.declined", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Опоздаю
      static let commonStatusesLate = Rswift.StringResource(key: "common.statuses.late", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Отказался
      static let eventsListSectionsDeclined = Rswift.StringResource(key: "eventsList.sections.declined", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Пойду
      static let commonStatusesOntime = Rswift.StringResource(key: "common.statuses.ontime", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Приглашен
      static let commonStatusesUnknown = Rswift.StringResource(key: "common.statuses.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Приглашен
      static let eventsListSectionsInvited = Rswift.StringResource(key: "eventsList.sections.invited", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Localizable
      static func tableName(_: Void = ()) -> String {
        return NSLocalizedString("tableName", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ближайшее событие
      static func eventsListSectionsActive(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.sections.active", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Будущие события
      static func eventsListSectionsFuture(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.sections.future", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Возможно
      static func commonStatusesMaybe(_: Void = ()) -> String {
        return NSLocalizedString("common.statuses.maybe", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Все события
      static func eventsListTitle(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Не пойду
      static func commonStatusesDeclined(_: Void = ()) -> String {
        return NSLocalizedString("common.statuses.declined", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Опоздаю
      static func commonStatusesLate(_: Void = ()) -> String {
        return NSLocalizedString("common.statuses.late", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Отказался
      static func eventsListSectionsDeclined(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.sections.declined", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Пойду
      static func commonStatusesOntime(_: Void = ()) -> String {
        return NSLocalizedString("common.statuses.ontime", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Приглашен
      static func commonStatusesUnknown(_: Void = ()) -> String {
        return NSLocalizedString("common.statuses.unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Приглашен
      static func eventsListSectionsInvited(_: Void = ()) -> String {
        return NSLocalizedString("eventsList.sections.invited", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _AvatarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AvatarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _EventCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EventCell
      
      let bundle = R.hostingBundle
      let identifier = "EventCell"
      let name = "EventCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try eventsList.validate()
      try launchScreen.validate()
    }
    
    struct eventsList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = EventsListViewController
      
      let bundle = R.hostingBundle
      let eventsListViewController = StoryboardViewControllerResource<EventsListViewController>(identifier: "EventsListViewController")
      let name = "EventsList"
      
      func eventsListViewController(_: Void = ()) -> EventsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventsListViewController)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'background' is used in storyboard 'EventsList', but couldn't be loaded.") }
        }
        if _R.storyboard.eventsList().eventsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventsListViewController' could not be loaded from storyboard 'EventsList' as 'EventsListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
